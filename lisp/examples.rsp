
(def join ((x xs) (cons x xs))
     	  ((x y . more)
	   ((join x (apply join y more)))))

(def append ((x ())
     	     (list x))
     	    ((x (y . ys))
	     (cons y (append x ys))))

(def len (() 0)
     	 ((_ . xs) (1+ xs.len)))

(def elem? ((_ ()) false)
     	   ((x (x . _)) true)
	   ((x  (_ . xs)) (elem? x xs)))

(def map ((_ ()) ())
     	 ((f (x . xs))
	  (cons (f x)
	     	(map f xs))))

(def filter ((_ ()) ())
     	    ((p? (x . xs))
	     (if (p? x)
	     	 (cons x (filter p? xs))
		 (filter p? xs))))

(typ list (nil)
     	  (cons :car :cdr))

(typ tree (empty)
     	  (leaf :key)
	  (node :key :left :right))

(typ str list(chr()))

(typ color :red 0 :black 1)

(handle ([:error/type agitant msg] (do (prin msg)
		      	      	       agitant)
	 [:error/zero-div agitant msg] (do (prin msg)
	 		  	       	   agitant)
	 [_ agitant msg] (do (prin msg)
	    	    	     agitant))

	(/ 2 0))