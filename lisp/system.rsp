;;; begin system.rsp

(val *syntax* {})

(fun atom? [x]
  (not (cons? x)))

(fun lit? [x]
  "`x` is self-evaluating?" 
  (if (sym? x)
      (not (kw? x))
      (not (cons? x))))

(fun macro-call*? [form]
  "Supplied form should be macro-expanded?"
  (and (cons? form)
       (sym? (car form))
       (assc *syntax* (car form))))

(fun macro-expand [form]
  "Expand the supplied form once."
  (if (atom? form)
      form
      (let [result (macro-call*? form)]
        (if result
	    (apply (car result)
	    	   (cdr result))
	    form))))

(fun macro-expand* [form]
  "Expand the supplied form recursively."
  (cond (atom? form)
          form
  	(macro-call*? form) :as result
	  (macro-expand* (apply (car result)
	  	 	 	(cdr result)))
        otherwise
	  (map macro-expand* form)))

(fun syntax-put [name expander]
  "Add a macro-expander to the syntax table."
  (put *syntax* name expander))

(fun eval [x]
  "Pass single argument "
  (eval x (&env)))

;;; end system.rsp