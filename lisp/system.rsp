;; core variables & essential helpers

(defv *syntax* {})  ;; macro  transformers

(defv *syntax-put!*
      (lmb (name transformer)
      	   (assx *syntax* name transformer)))

(defv nil?
      (lmb (x)
      	   (id? x nil)))

(defv true?
      (lmb (x)
      	   (id? x true)))

(defv false?                        ;; values: ()
      (lmb (x)                      ;; envt:   ((x) . ())
      	   (id? x false)))          ;; code:   (arity 1 loadv 0 0 loadf id? return)

(defv has-key?
      (lmb (coll key)
      	   (nil? (assc coll key)))) ;; values: (assc' nil?')
	                            ;; envt:   ((key coll) . ())
				    ;; code:   (arity 2 loadv 0 0 loadv 0 1 call 2 call 1 return

(defv macro-name?
      (lmb (name)
      	   (has-key? *syntax* name)))

;; type predicates
(defv cons?
      (lmb (xpr) (isa? 'cons xpr))) ;; values: ('cons)
      	   	       	     	    ;; envt:   ((xpr) . ())
      	   	       	     	    ;; code:   (arity 1 loadc 0 loadv 0 0 isa? return)
(defv sym?
      (lmb (xpr) (isa? 'sym xpr)))  ;; values: ('sym)
                                    ;; envt:   ((xpr) . ())
				    ;; code:   (arity 1 loadc 1 loadv 0 0 isa? return)
(defv ref?
      (lmb (xpr) (isa? 'ref xpr)))  ;; values: ('ref)
      	   	       	    	    ;; envt:   ((xpr) . ())
				    ;; code:   (arity 1 loadc 1 loadv 0 0 isa? return)
(defv key?
      (lmb (xpr) (isa? 'key xpr)))

(defv arr?
      (lmb (xpr) (isa? 'arr xpr)))

(defv str?
      (lmb (xpr) (isa? 'str xpr)))

(defv bin?
      (lmb (xpr) (isa? 'bin xpr)))

(defv map?
      (lmb (xpr) (isa? 'map xpr)))

(defv int?
      (lmb (xpr) (isa? 'int xpr)))



(defv *opcodes*
      { :loadv 0 :storev 1

      	:loadg 2 :storeg 3

	:loadc 4

	:jmpf  5 :jmpt 6 :jmp 7
	
	:arity 8 :varity 9

	:call 10

	:closure 11 :return 12 :stop 13

	:loadn 14 :loadt 15 :loadf 16

	:pop 17

	:cons 18 :car 19 :cdr 20

	:cax 21 :cdx 22

	:isa? 23 :id? 24 :cmp 25 :not 26 })

(defv opcode
      (lmb (k)
      	   (let (o (assc *opcodes* k))
	   	(if o (cdr o) nil))))

(defv opargco
      (lmb (x)
      	   (if (< 2 (opcode x))
	       2
	       (if (< 11 (opcode x))
	       1
	       0))))

(defv compile (xpr env)
      ())