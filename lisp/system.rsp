(def *syntax* {})

(def (*syntax-put* name xform)
  (put *syntax* name (compile-lambda xform)))

(def (macro-call? form)
  (and (cons? form)
       (assoc *syntax* car-form)))

(def (apply-macro entry form)
  (apply (cdr entry) (cdr form)))

(def (macro-expand-1 form)
  (def is-macro (macro-call? form))
  (if is-macro
      (apply is-macro form)
      form))

(def (map fun args)
  (if (nil? args)
      ()
      (cons (fun (car args))
            (map fun (cdr args)))))

(def (macro-expand form)
  (def is-macro (macro-call? form))
    (if is-macro
    	(macro-expand (apply-macro is-macro form))
	(if (cons? form)
	    (map macro-expand form)
	    form)))

(def eval ((x) (eval x (&env)))
     	  ((x e) (exec (comp (macro-expand x) e))))

(*syntax-put* 'mac
	      (lmb (formals . body)
	        `(*syntax-put* ~(car formals)
			       (lmb ~(cdr formals) ~@body))))

(mac (let formals . body)
  `((lmb ~(map caar formals) ~@body) ~(map cdar formals)))

(mac (cond . body)
  (if (nil? body)
      ()
      (if (id? (caar body) 'else)
	  `(do ~@(cdar body))
	  `(if ~(caar body)
	       (do ~@(cdar body))
	       ~(cond (cdr body))))))

(mac (and . args)
  (cond ((nil? args) true)
  	((nil? (cdr args)) (car args))
	(else `(let ((x# ~(car args)))
	         (if x# x# (and ~@(cdr args)))))))

(mac (catch! (e . handler) . body)
  `(handle (e#)
     ([~@e] ~@handler)
     ~@body))
