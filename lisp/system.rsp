;;; begin system.rsp

(val *syntax* {})

;;; type predicates
(fun port? (x: any)
  (isa? x port))

(fun chr? (x: any)
  (isa? x chr))

(fun nil? (x: any)
  (isa? x nil))

(fun cons? (x)
  (isa? x cons))

(fun sym? (x)
  (isa? x sym))

;;; utilities
(fun map (f . xss)
  (labl ((map1 f xss)
  	   (if (nil? xs)
	       ()'
	       (cons (f (car xs))
		     (map1 f (cdr xs))))
	 (mapn f xss)
	   (if (some? empty? xss)
	       ()'
	       (cons (apply f
	                    (map1 car xss))
		     (mapn f
		           (map1 cdr xss)))))
	 (cond (len=? xss 0) (error "Not enough arguments to #")
	       (len=? xss 1) (map1 f (car xss))
	       otherwise     (mapn f xss))))

(fun map* (f: function xs: list)
  (if (atom? xs)
      (f xs)
      (cons (map* f (car xs))
      	    (map* f (cdr xs)))))

(fun zip xss
  (if (some? empty? xss)
      ()'
      (cons (map car xss)
      	    (zip (map cdr xss)))))

(type list
      (nil)
      (cons car: any
      	    cdr: list))

;;; end system.rsp