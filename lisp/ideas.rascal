# speculative non-lisp syntax.


module Base do
  @doc "Rascal base library."
  expose var, val

  mac var(name, :=, init) do
    @doc "Standard syntax for defining mutable bindings."
    quote do
      def unquote(name) do
        @annot(:final, false)
        unquote(init)
      end
    end
  end

  mac var(name, do: block) do
    quote do
      def unquote(name) do
        @annot(:final, false)
        unquote(block)
      end
    end
  end

  mac val(name, :=, init) do
    @doc "Standard syntax for defining immutable bindings."
    quote do
      def unquote(name) do
        @annot(:final, true)
        unquote(init)
      end
    end
  end

  mac val(name, do: block) do
    @doc "Standard syntax for defining immutable bindings."
    quote do
      def unquote(name) do
        @annot(:final, true)
        unquote(block)
      end
    end
  end

  # Example struct type definition
  type Pair{X, Y} = (fst: X, snd: Y)

  # Example trait definition
end
