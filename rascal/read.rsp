;;; begin read.rsp
;;; the reader is bootstrapped here
;;; backquote

; backquote
(mac bqt (x)
  (bqt-expand x))

(fun bqt? (x)
  (and (cons? x)
       (car=? x 'bqt)))

(fun tld? (x)
  (and (cons? x)
       (car=? x 'tld)))

(fun tld-at? (x)
  (and (cons? x)
       (car=? x 'tld-at)))

(fun bqt-expand (x)
  (if (lit? x)    (list x nul)
      (sym? x)    (list (list 'quote x) nul)
      (tld? x)    (list (snd x) true)
      (tld-at? x) (list (list 'splice (snd x)) true)
      otherwise
        (let (a (bqt-expand:hd x)
	      b (bqt-expand:tl x))
	     (if (or (snd a)
	     	     (snd b))
		   (list (if (car=? d 'splice)
		     	   (if (car=? a 'splice)
		       	       (list apply cat  (snd a) (snd b))
		       	       (list apply cons a (snd b)))
		     	   (car=? a 'splice)
		       	     (list append (snd a) b)
		           (list cons a b)) true)
	         (lit? x)
		   (list x nul)
		 otherwise
		   (list (list 'quote x) nul)))))
		 

(export (:only bqt))

;;; end read.rsp
