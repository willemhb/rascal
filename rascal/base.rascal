use Base

module Std do
    # Rascal standard library.

    # Numeric utilities.
    fun zero?(x::Number) do
        x == 0
    end

    fun even?(x::Number) do
        integer?(x) and x % 2 == 0
    end

    fun odd?(x::Number) do
        integer?(x) and x % 2 == 1
    end

    fun inc(x::Number) do
        x + 1
    end

    fun dec(x::Number) do
        x - 1
    end

    fun sqr(x::Number) do
        x * x
    end

    fun pow(x::Number, n::Number) do
        pow(x, n, 1)
    end

    fun pow(x::Number, n::Number, acc::Number) do
        cond do
            x == 0    -> acc
            odd?(x)   -> pow(x, n-1, x*acc)
            otherwise -> pow(x*x, n/2, acc)
        end
    end

    fun map(fn::Function, xs::List) do
        map(fn, xs, [])
    end

    fun map(fn::Function, xs::List, acc::List) do
        case xs do
            []     -> reverse(acc)
            [x|xs] -> map(fn, xs, fn(x)|xs)
        end

    fun reduce(fn::Function, xs::List) do
        
    end

    fun norm(xs::List) do
       map(sqr, xs) |> sum |> sqrt
    end
end

