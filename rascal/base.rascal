module Base do
    @doc "Core Rascal syntax."

    mac raise(exc_type::Symbol) do
        quote do
            perform {[:exception, unquote(exc_type)]}
        end
    end

    mac raise(args::Tuple{Symbol}) do
        exc_type = fst(args)
        args     = assoc(args, 0, [:exception, exc_type])
        quote, do: perform unquote(args)
    end

    mac try(do: try_body, catch: catch_body) do
        @doc "Common error handling idiom (wraps effect system)."

        fun transform_catch_clause(clause) do
            
        end

        quote do
            begin do
                splice(try_body)
            handle
                
            end
        end
    end

    fun save_divide(x::Number, y::Number) do
        @doc "Example of try/catch usage."
        if y == 0 do
            raise {:zero_division, x, y}
        else
            
        end
    end
end
