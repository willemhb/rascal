module Base do
  @doc "Core Rascal syntax."

  # try/catch/finally error handling idiom.
  mac raise(exc_type::Symbol) do
    @doc "Simplest case."
    quote, do: perform {[:exception, unquote(exc_type)]}
  end

  mac raise(args::Tuple{Symbol, ..}) do
    @doc "More complex: tuple of arguments passed."
    quote, do: perform {[:exception, unquote(fst(args))], splice(rst(args))}
  end

  mac raise(args::Tuple{List, ..}) do
    @doc "More complex yet: tuple of arguments passed, exception type namespaced."
    quote, do: perform {[:exception, splice(fst(args))], splice(rst(args))}
  end

  mac try(do: try_block, catch: catch_block) do
    @doc "Most complex macro in try/catch/finally probably???"

    fun expand_catch_clause(clause) do
      case clause do
       {:->, c, {[..e], ..r}} -> {:->, c, {[:exception, ..e], ..r}}
       {:->, c, {e, ..r}}     -> {:->, c, {[:exception, e], ..r}}
       {:->, c, [..e]}        -> {:->, c, [:exception, ..e]}
       {:->, c, e}            -> {:->, c, [:exception, e]}
      end
    end

    quote do
      begin do
        splice(try_block)
      handle
        splice(map(expand_catch_clause, catch_block))
      end
    end
  end
end
