# begin system.rsp

# basic syntax examples
# assignment/toplevel binding syntax
val SyntaxTable <- %{},
    Modules     <- %{},
    Debug       <- true,
    Version     <- "0.0.1.a";

# basic syntax examples
fun map( fn:: Fun, xs:: List ):: List
  case xs {
    []     -> []
    [x|xs] -> fn(x) | map(fn, xs)
  }

fun map( fn :: Fun, xs:: Tuple ):: Tuple
  case xs {
    ()     -> ()
    (x|xs) -> fn(x) | map(fn, xs)
 }

fun conj( xs:: List, ..args ):: List
  case args {
    []      -> xs
    [x]     -> x|xs
    [x|xs'] -> conj(x|xs, ..xs')
 }

fun not ( x:: Any ):: Bool
  if x
    false
  else
    true

cntl Exception {
  raise( x:: Any )
  raise( x:: Any, msg:: Str )
}

fun catch( action:: Fun, handler:: Fun )
  with
    raise(agitant, msg) ->
      handler(agitant, msg)
  hndl
    action

fun async( action:: Fun )
  with
    await( expression ) ->
      schedule( :okay )
        do
          expression
        do x
          resume( x )
  hndl
    action

cntl Generator{X}
  yield( x:: X )

fun range( stop:: Int )
  range( 1, stop )

fun range( start:: Int, stop:: Int )
  range( start, stop, 1 )

fun range ( start:: Int, stop:: Int, step:: Int )
  if start >= stop
    stop
  else do {
    yield( start )
    range( start+step,
    	   stop,
	   step )
  }

# type definition syntax examples
data Gender {
  "Enum type example."
  Male
  | Female
  | Nonbinary
  | Unspecified
}

data Student {
  "Record type example."
  first:: Str     <- "John"
  last:: Str      <- "Doe"
  grade:: Int     <- 1
  gender:: Gender <- Unspecified
}

# end system.rsp