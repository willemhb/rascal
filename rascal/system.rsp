# begin system.rsp

# basic syntax examples
# assignment/toplevel binding syntax
val SyntaxTable <- %{},
    Modules     <- %{},
    Debug       <- true,
    Version     <- "0.0.1.a"

# basic syntax examples
fun map( fn, xs ) {
  if xs = []
    []
  else
    Cons( fn( xs.hd ),
    	  map( fn, xs.tl ) )
}

fun filter ( pred, xs ) {
  if xs = []
    []
  elif pred( xs )
    Cons( xs.hd,
    	  filter( pred, xs.tl ) )
  else
    filter( pred, xs.tl )
}

fun elem? ( x, xs ) {
  if xs = []
    return []
  elif x = xs.hd
    return true
  else
    return elem?( x, xs.tl )
}

fun for_each (fn, xs) {
  if xs = []
    return nil
  elif len( xs ) = 1
    return fn( xs.hd )
  else do {
    fn( xs.hd )
    return for_each( fn, xs.tl )
  }
}

fun len ( xs )
{
  val XsType <- type( xs )

  if XsType = List  or
     XsType = Tuple or
     XsType = Map   or
     XsType = Set
     do {
       return xs.length
  } else
    error( "Type #{XsType} is not a sequence." )
}

# end system.rsp