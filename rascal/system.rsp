# begin system.rsp

# toplevel assignments

(class Person xp
  { :name str(), :age int() }
  (birthday [xp]))

(type (student
        [:name, str(), "John Doe"]
   	[:age,  int(), 0]))

(type tree
      (empty)
      (leaf any())
      (node any(), tree(), tree()))
      
(fun map [fn, xs: tree]
  (case xs
    (empty)        (empty)
    (leaf k)       (leaf (fn k))
    (node k, l, r) (node (fn k)
    	      	         (map fn l)
		         (map fn r))))

(fun birthday [xp: student]
  ())

(impl student < Person)

class Person xp
  ref(xp, :age): int
  ref(xp, :name): str
  birthday(xp): int
end

type tree
  | empty( )
  | leaf( any )
  | node( any, tree, tree )
end

fun map( fn, xs: tree)
  case xs
    empty()        -> empty()
    leaf( x )      -> leaf( fn( x ) )
    node( x, l, r) node( fn( x ),
    	     	   	 map( fn, l ),
			 map( fn, r ) )
  end
end

# end system.rsp