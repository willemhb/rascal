# This file is for experimenting with different syntaxes and shouldn't be expected to work.

# By default, annotations are attached to the current environment. This will be the module environment at toplevel.

@doc "Simple macro utilities."

# Inside a function definition, annotations are attached to the metadata of the function environment.
fun syntax_type(expr) do
  @doc "Classify the syntactic type of an AST expression."

  val expr_type = typeof(expr)

  cond do
    expr_type == :List ->
      :Call
    expr_type == :Tuple ->
      :Reference
    otherwise ->
      :Literal
  end
end

val SyntaxTable = MutMap()

# Annotations can also be added to an object explicitly using the `@<object>.<annot> <value>` syntax.
@SyntaxTable.constraint MutMap
@SyntaxTable.doc "Macro environment (just for demo purposes, macros probably won't be implemented this way)."

# Looping syntax
fun partition(xs) do
  @doc "return a tuple of two lists where"
       "the first list has all of the even-indexed elements from `xs`"
       "and the second list has all of the odd-index elements from `xs`."

  label do
    even(xs, left, right) ->
      if empty?(xs) do
        (left, right)
      else
        odd(rest(xs), conj(left, first(xs)), right)
      end

    odd(xs, left, right) ->
      if empty?(xs) do
        (left, right)
      else
        even(rest(xs), left, conj(right, first(xs)))
      end

    begin xs = seq(xs), left = [], right = [] ->
      even(xs, left, right)
  end
end

# Effect syntax
fun safe_divide(x, y) do
  control _ do
    x / y
  handle
    error.zero_division() ->
      print("error: division by zero in #{x} / #{y}")
      nan
  end
end

fun with_output_file(path, func) do
  control with in do
  when
    enter ->
      in = open(path)
    leave ->
      close(in)
      in = nul
    return(x) ->
      close(in)
      x
  handle _
    error.file_not_found(msg) ->
      print("file at '#{path}' does not exist.")
      print(msg)
      nul
    error.*(msg) ->
      print(msg)
      nul
  begin
    func(in)
  end
end

# Examples to demonstrate using effects to implement exceptions
mac throw(expression) do
  quote do: raise $(Macro.qualify(:error, expression))
end

mac try(do: do_block, catch: catch_block) do
  fun xform(left, right) do
    quote do
      $(Macro.qualify(:error, left)) ->
        $(right)
    end
  end

  val xformed_catch = Macro.arrow_map(xform, catch_block)

  quote do
    control do
      $(do_block)
    handle _
      $(xformed_catch)
    end
  end
end

mac try(do: do_block, catch: catch_block, finally: finally_block) do
  fun xform(left, right) do
    quote do
      $(qualify(:error, left)) ->
        $(right)
    end
  end

  val xformed_catch = Macro.arrow_map(xform, catch_block)

  quote do
    control do
    when
      leave ->
        $(finally_block)
    handle _
      $(xformed_catch)
    begin
      $(do_block)
    end
  end
end

# Examples to demonstrate how effects could be used to implement
# Python-style generators. This isn't really idiomatic in Rascal,
# but it's a good way to experiment with and demonstrate syntax.

# NB: some of the functions below use a spread syntax and variadic arguments,
# but I'm not sure this will actually be part of an initial release of
# Rascal, since it makes multimethods significantly more complicated.
# It should be possible to write a function or macro that generates an argument
# signature for a wrapper function but I don't want to think about this just yet.
mac yield(expression) do
  quote do: raise generator.yield($(expression))
end

fun make_generator(func: Func) do
  fun wrapper(args..) do
    var resume = nul
    var result = nul
    var done?  = false

    fun inner(args..) do
      cond do
        done? ->
          result
        resume /= nul ->
          resume(args..)
        otherwise ->
          control do
          when
            return(x) ->
              result = x
              done?  = true
              resume = nul
          handle k
            generator.yield(x) ->
              resume = k
              x
          begin
            func(args..)
          end
      end
    end
  end

  wrapper
end

# Examples to demonstrate using traits to build protocols

# Traits are syntactic sugar providing direct
# support for the Tim Holy trait trick from Julia.

# Traits can optionally specify an interface, but don't
# have to (but this is an extremely common use case that
# ought to be supported).

# Traits can extend other traits using the `instance` keyword,
# provided the extended trait has the same arity.

# A group of types 'XS' can instantiate a trait 'T' using
# `instance T{XS}`. If 'T' specifies an interface, the interface
# must be implemented in a `do` block following the `instance`
# declaration.



trait Seq{S} do
  @doc "Trait type for collections whose values can be visited in some order."
  fun seq(xs: S): S' where Seq{S'}
  fun first(xs: S)
  fun rest(xs: S): S' where Seq{S'}
  fun empty?(xs: S): Bool
end

trait Atom not instance Seq # 

struct ListSeq{X} do
  val source: List{X}
  mut first: X | nul
  mut forced?: Bool
  mut offset: Arity
end

fun ListSeq(xs: List{X}, offset: Arity) do
    ListSeq(xs, nul, false, offset)
end

instance Seq{nul} do
  fun seq(xs: nul) do: nul

  fun first(xs: nul) do: raise error.value("`first` called on empty sequence.")

  fun rest(xs: nul) do: nul
  
  fun empty?(xs: nul) do: true
end

instance Seq{ListSeq{X}} do
  fun seq(xs: ListSeq{X}): X do
    xs
  end

  fun first(xs: ListSeq{X}): X do
    if not xs.forced? do
      xs.first   = xs.source[xs.offset]
      xs.forced? = true
    end

    xs.first
  end

  fun rest(xs: ListSeq{X}): ListSeq{X} | nul do
    if xs.offset + 1 == count(xs.source) do
      nul
    else
      ListSeq(xs.source, nul, false, xs.offset + 1)
    end
  end

  fun rest!(xs: ListSeq{X}): ListSeq{X} | nul do
    @doc "Imperative version of rest (useful for avoiding massive memory use in internal loops)."
    if xs.offset + 1 == count(xs.source) do
      nul
    else
      xs.offset += 1
      xs.first   = nul
      xs.forced? = false
      xs
  end

  fun empty?(xs: ListSeq{X}): Bool do
    false
  end
end

instance Seq{List{X}} do
  fun seq(xs: List{X}): ListSeq{X} | nul do
    if count(xs) == 0 do
      nul
    else
      ListSeq(xs, 0)
    end
  end

  fun first(xs: List{X}): X do
    xs[0]
  end

  fun rest(xs: List{X}): ListSeq{X} | nul do
    if count(xs) == 1 do
      nul
    else
      ListSeq(xs, 1)
    end
  end

  fun empty?(xs: List{X}): Bool do
    count(xs) == 0
  end
end

# Examples of various cute function composition syntaxes.
# First 16 powers of 2
0..15 |> map &(2^) |> []

# Map of ASCII characters to their integer values
'\0'..'\DEL' |> 0..127 |> zip |> {}


# Examples of process usage