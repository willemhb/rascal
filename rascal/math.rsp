;;; begin math.rsp
;;; rascal's math standard library

(union num
  "Primitive numeric types."
  (int real))

;;; extremely basic utilities
(fun zero? (x) (id? x 0))
(fun one?  (x) (id? x 1))
(fun even? (n) (zero? (% n 2)))
(fun odd?  (n) (one?  (% n 2)))
(fun sqr   (x) (* x x))
(fun hlv   (x) (/ x 2))
(fun dec   (n) (- n 1))
(fun inc   (n) (+ n 1))
(fun cub   (x) (* x x x))

(fun pow
  "fast power algorithm."
  ((x int) (n num))
  (do (fun loop
       (x n acc)
       (if (zero? n) acc
      	   (even? n) (loop (sqr x) (hlv n) acc)
      	   otherwise (loop x (dec n) (* x acc))))
      (loop x n 1)))

;;; C library wrappers
(fun sin
  ((x num))
  (c-call :sin :double (:double) (x)))

(fun cos
  ((x num))
  (c-call :cos :double (:double) (x)))

(fun tan
  ((x num))
  (c-call :tan :double (:double) (x)))

;;; end math.rsp