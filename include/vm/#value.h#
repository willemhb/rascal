#ifndef rl_vm_value_h
#define rl_vm_value_h

#include "rascal.h"

/* commentary

   Basic value API (eg type querying, size querying, etc) */

/* C types */
typedef enum value_t value_t;

enum value_t {
  object_value, stream_value, native_value, nul_value, bool_value,
  glyph_value, small_value, fixnum_value, real_value
};

// union of types a tagged value can be
typedef union
{
  rl_value_t as_value;
  rl_real_t as_real;
  rl_fixnum_t as_fixnum;
  rl_small_t as_small;
  rl_bool_t as_bool;
  rl_nul_t as_nul;object_t *make_object( datatype_t *datatype )
{
  layout_t *layout  = datatype->layout;
  
  object_t *out = alloc(layout->obsize);

  *out = (object_t) obj_init(datatype, layout->obsize, 0);

  /* in case allocation of object fiels triggers the GC */
  save_objects(1, &out);

  init_object(out);

  return out;
}

void init_object( object_t *object )
{
  object->next = Heap.live;
  Heap.live    = object;

  if ( object_init(object) )
    object_init(object)(object);
}

void free_object( object_t *object )
{
  if ( object_free(object) )
    object_free(object)(object);

  if ( !flagp(object->flags, object_fl_static))
    dealloc(object, object->size);
}

void mark_object( object_t *object )
{
  if ( object == NULL )
    return;

  if ( object->black )
    return;

  object->black = true;

  mark_object((object_t*)object->type);

  if ( object_trace(object) )
    objects_push( Heap.grays, object );

  else
    object->gray = false;
}

/* accessors */
#include "tpl/impl/record.h"
GET(object, type, datatype_t*);
GET(object, size, size_t);
GET(object, flags, uint);

uint set_object_flags( object_t *object, uint fl )
{
  assert(object);

  return (object->flags |= fl);
}

uint unset_object_flags( object_t *object, uint fl )
{
  assert(object);

  return (object->flags &= ~fl);
}

  rl_stream_t as_stream;
  rl_native_t as_native;
  rl_object_t *as_object;
} rl_data_t;

/* globals */
/* tags */
#define QNAN        0x7ff8000000000000ul
#define SIGNBIT     0x8000000000000000ul

/* value tags */
/* immediate tags */
#define REAL        0x0000000000000000ul
#define OBJECT      0x7ffc000000000000ul
#define STREAM      0x7ffd000000000000ul
#define NATIVE      0x7ffe000000000000ul
#define NUL         0x7fff000000000000ul
#define BOOL        0xfffc000000000000ul
#define GLYPH       0xfffd000000000000ul
#define SMALL       0xfffe000000000000ul
#define FIXNUM      0xffff000000000000ul

/* masks */
#define TAGMASK     0xffff000000000000ul
#define PTRMASK     (~TAGMASK)

/* values */
#define TRUE        0xfffc000000000001ul
#define FALSE       0xfffc000000000000ul

/* API */
void *toptr( rl_value_t x );
value_t value_type( rl_value_t value );

/* runtime */
void rl_vm_value_init( void );
void rl_vm_value_mark( void );
void rl_vm_value_cleanup( void );

/* convenience */
#define as_value( x ) (((rl_data_t)(x)).as_value)

#define tagof( x ) ((x)&TAGMASK)
#define dataof( x ) ((x)&PTRMASK)
#define tag( x, t ) (dataof(as_value(x))|(t))

#endif
